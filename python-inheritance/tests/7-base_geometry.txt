 
>>> BaseGeometry = _import_('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> try:
...     bg.area()  # Should raise an exception
... except Exception as e:
...     print(e)
area() is not implemented

# Test calling integer_validator() with missing arguments
>>> try:
...     bg.integer_validator()  # Missing arguments
... except Exception as e:
...     print(e)
integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> try:
...     bg.integer_validator("age")  # Missing the value argument
... except Exception as e:
...     print(e)
integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e._class.name_, e))
...
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e._class.name_, e))
...
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e._class.name_, e))
...
[ValueError] distance must be greater than 0

>>> try:
...     bg.integer_validator("age", (4,))
... except Exception as e:
...     print(e)
age must be an integer

>>> try:
...     bg.integer_validator("age", [3])
... except Exception as e:
...     print(e)
age must be an integer

>>> try:
...     bg.integer_validator("age", True)
... except Exception as e:
...     print(e)
age must be an integer

>>> try:
...     bg.integer_validator("age", {3, 4})
... except Exception as e:
...     print(e)
age must be an integer

>>> try:
...     bg.integer_validator("age", None)
... except Exception as e:
...     print(e)
age must be an integer
